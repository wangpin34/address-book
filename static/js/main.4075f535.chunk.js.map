{"version":3,"sources":["types.ts","context.ts","components/editable-cell/index.tsx","components/addrs/index.tsx","App.tsx","serviceWorker.ts","i18n.ts","index.tsx"],"names":["Mode","genAddr","id","Math","random","slice","key","newAdding","defaultValue","addrs","name","location","office","officePhone","cellPhone","selected","handleAdd","handleDelete","handleUpdate","handleSelect","_","syncUpdate","mode","View","setMode","m","context","React","createContext","EditableCell","addr","defaultEditing","allowEdit","contextValue","useContext","MyContext","useState","Boolean","editing","setEditing","Editing","value","onChange","e","newRecord","target","className","onDoubleClick","Column","Table","ColumnGroup","genSorter","a","b","aVal","bVal","AddrsTable","t","useTranslation","rowSelection","selectedRows","getCheckboxProps","record","all","dataSource","title","footer","size","danger","onClick","bordered","dataIndex","sorter","parseInt","render","index","App","setAddrs","setSelected","updating","setUpdating","changed","useMemo","filter","find","JSON","stringify","useCallback","updated","findIndex","push","handleUpdates","length","notification","open","message","description","map","c","join","forEach","next","nextUpdating","addrNew","selecting","allAddr","list","Provider","window","hostname","match","i18n","use","initReactI18next","init","resources","en","translation","phone","cell","delete","update","add","zh","lng","fallbackLng","interpolation","escapeValue","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.4075f535.chunk.js","sourcesContent":["export interface Addr {\r\n  id: string;\r\n  key?: string;\r\n  name?: string;\r\n  location?: string;\r\n  office?: string;\r\n  officePhone?: string;\r\n  cellPhone?: string;\r\n  newAdding?: boolean;\r\n}\r\n\r\nfunction genID() {\r\n  return `${Math.random()}`.slice(2);\r\n}\r\n\r\nexport function genAddr(): Addr {\r\n  const id = genID();\r\n  return { id, key: id, newAdding: true };\r\n}\r\n\r\nexport type Addrs = Addr[];\r\n\r\n// table mode\r\nexport enum Mode {\r\n  View,\r\n  Editing\r\n}\r\n","import React from \"react\";\r\nimport { Addr, Addrs, Mode } from \"./types\";\r\n\r\ninterface Context {\r\n  addrs: Addrs;\r\n  all?: Addrs;\r\n  selected?: Addrs;\r\n  handleAdd(): void;\r\n  handleDelete(): void;\r\n  handleUpdate(): void;\r\n  handleSelect(p: Addrs): void;\r\n  syncUpdate: Function;\r\n  mode: Mode;\r\n  setMode(m: Mode): void;\r\n}\r\n\r\nexport const defaultValue: Context = {\r\n  addrs: [\r\n    // Copied from the excel sheet\r\n    {\r\n      id: \"501\",\r\n      key: \"501\",\r\n      name: \"Khali Zhang\",\r\n      location: \"Shanghai\",\r\n      office: \"C-103\",\r\n      officePhone: \"x55778\",\r\n      cellPhone: \"650-353-1239\",\r\n    },\r\n  ],\r\n  selected: [],\r\n  handleAdd: () => null,\r\n  handleDelete: () => null,\r\n  handleUpdate: () => null,\r\n  handleSelect: (_: Addrs) => null,\r\n  syncUpdate: (_: Addr) => null,\r\n  mode: Mode.View,\r\n  setMode: (m: Mode) => null,\r\n};\r\n\r\nexport const context = React.createContext(defaultValue);\r\n\r\nexport default context;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Input } from \"antd\";\r\nimport { Addr, Mode } from \"../../types\";\r\nimport MyContext from \"../../context\";\r\n\r\ninterface PropsOfCell {\r\n  name: keyof Addr;\r\n  addr: Addr;\r\n  defaultEditing?: boolean;\r\n  allowEdit?: boolean;\r\n}\r\n\r\nconst EditableCell = ({\r\n  name,\r\n  addr,\r\n  defaultEditing,\r\n  allowEdit,\r\n}: PropsOfCell) => {\r\n  const contextValue = useContext(MyContext);\r\n  const syncUpdate = contextValue.syncUpdate;\r\n  const [editing, setEditing] = useState<boolean>(Boolean(defaultEditing));\r\n\r\n  if (allowEdit && editing && contextValue.mode === Mode.Editing) {\r\n    return (\r\n      <Input\r\n        value={addr[name] as string}\r\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n          const newRecord = { ...addr, [name]: e.target.value };\r\n          syncUpdate && syncUpdate(newRecord);\r\n        }}\r\n      />\r\n    );\r\n  } else {\r\n    return (\r\n      <span\r\n        className=\"editable-grid-text\"\r\n        onDoubleClick={() => {\r\n          if (allowEdit) {\r\n            setEditing(true);\r\n            contextValue.setMode(Mode.Editing);\r\n          }\r\n        }}\r\n      >\r\n        {addr[name]}\r\n      </span>\r\n    );\r\n  }\r\n};\r\n\r\nexport default EditableCell;\r\n","import React, { useContext } from \"react\";\r\nimport MyContext from \"../../context\";\r\nimport EditableCell from \"components/editable-cell\";\r\nimport { Table, Space, Button } from \"antd\";\r\nimport { Addr, Addrs } from \"../../types\";\r\nimport { Key } from \"antd/lib/table/interface\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport \"./index.sass\";\r\nconst { Column, ColumnGroup } = Table;\r\n\r\nfunction genSorter(name: keyof Addr) {\r\n  return (a: Addr, b: Addr) => {\r\n    const aVal = a[name];\r\n    const bVal = b[name];\r\n\r\n    if (!aVal || !bVal) {\r\n      return 0;\r\n    }\r\n    if (aVal > bVal) {\r\n      return 1;\r\n    } else if (aVal === bVal) {\r\n      return 0;\r\n    } else {\r\n      return -1;\r\n    }\r\n  };\r\n}\r\n\r\nconst AddrsTable = () => {\r\n  const { t } = useTranslation();\r\n  const { handleSelect, handleDelete, handleAdd, handleUpdate } = useContext(MyContext)\r\n  // rowSelection object indicates the need for row selection\r\n  const rowSelection = {\r\n    onChange: (_: Key[], selectedRows: Addrs) => {\r\n      handleSelect(selectedRows);\r\n    },\r\n    getCheckboxProps: (record: Addr) => ({\r\n      name: record.name,\r\n    }),\r\n  };\r\n\r\n  const value = useContext(MyContext);\r\n  const addrs = value.all || [];\r\n\r\n  return (\r\n    <Table\r\n      rowSelection={{\r\n        ...rowSelection,\r\n      }}\r\n      dataSource={addrs}\r\n      title={() => \"Address Book\"}\r\n      footer={() => (\r\n        <Space size=\"middle\">\r\n          <Button danger onClick={handleDelete}>\r\n            {t(\"delete\")}\r\n          </Button>\r\n          <Button onClick={handleUpdate}>{t(\"update\")}</Button>\r\n          <Button onClick={handleAdd}>{t(\"add\")}</Button>\r\n        </Space>\r\n      )}\r\n      bordered\r\n    >\r\n      <Column\r\n        title={t(\"id\")}\r\n        dataIndex=\"id\"\r\n        key=\"id\"\r\n        sorter={(a: Addr, b: Addr) => parseInt(a.id) - parseInt(b.id)}\r\n      />\r\n      <Column\r\n        title={t(\"name\")}\r\n        dataIndex=\"name\"\r\n        key=\"name\"\r\n        render={(_: string, record: Addr, index: number) => (\r\n          <EditableCell\r\n            name=\"name\"\r\n            addr={record}\r\n            allowEdit={record.newAdding}\r\n            defaultEditing={record.newAdding}\r\n          />\r\n        )}\r\n        sorter={genSorter(\"name\")}\r\n      />\r\n      <Column\r\n        title={t(\"location\")}\r\n        dataIndex=\"location\"\r\n        key=\"location\"\r\n        render={(_: string, record: Addr, index: number) => (\r\n          <EditableCell\r\n            name=\"location\"\r\n            addr={record}\r\n            allowEdit={record.newAdding}\r\n            defaultEditing={record.newAdding}\r\n          />\r\n        )}\r\n        sorter={genSorter(\"location\")}\r\n      />\r\n      <Column\r\n        title={t(\"office\")}\r\n        dataIndex=\"office\"\r\n        key=\"office\"\r\n        render={(_: string, record: Addr, index: number) => (\r\n          <EditableCell\r\n            name=\"office\"\r\n            addr={record}\r\n            allowEdit={record.newAdding}\r\n            defaultEditing={record.newAdding}\r\n          />\r\n        )}\r\n        sorter={genSorter(\"office\")}\r\n      />\r\n      <ColumnGroup title={t(\"phone\")}>\r\n        <Column\r\n          title={t(\"office\")}\r\n          dataIndex=\"officePhone\"\r\n          key=\"officePhone\"\r\n          render={(_: string, record: Addr, index: number) => (\r\n            <EditableCell\r\n              name=\"officePhone\"\r\n              addr={record}\r\n              allowEdit={record.newAdding}\r\n              defaultEditing={record.newAdding}\r\n            />\r\n          )}\r\n          sorter={genSorter(\"officePhone\")}\r\n        />\r\n        <Column\r\n          title={t(\"cell\")}\r\n          dataIndex=\"cellPhone\"\r\n          key=\"cellPhone\"\r\n          render={(_: string, record: Addr, index: number) => (\r\n            <EditableCell\r\n              name=\"cellPhone\"\r\n              addr={record}\r\n              allowEdit\r\n              defaultEditing={record.newAdding}\r\n            />\r\n          )}\r\n          sorter={genSorter(\"cellPhone\")}\r\n        />\r\n      </ColumnGroup>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default AddrsTable;\r\n","import React, { useState, useCallback, useMemo } from \"react\";\r\nimport { Addrs, Addr, genAddr, Mode } from \"./types\";\r\nimport MyContext, { defaultValue } from \"./context\";\r\nimport AddrsTable from \"components/addrs\";\r\nimport { notification } from \"antd\";\r\nimport \"./App.sass\";\r\n\r\nfunction App() {\r\n  const [addrs, setAddrs] = useState<Addrs>(defaultValue.addrs);\r\n  const [selected, setSelected] = useState<Addrs>([]);\r\n  const [updating, setUpdating] = useState<Addrs>([]);\r\n  const [mode, setMode] = useState<Mode>(Mode.View);\r\n\r\n  const changed = useMemo(() => {\r\n    return updating.filter((a) => {\r\n      if (a.newAdding) {\r\n        return true;\r\n      }\r\n      const target = addrs.find((b) => b.id === a.id);\r\n      if (target) {\r\n        if (JSON.stringify(a) !== JSON.stringify(target)) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    });\r\n  }, [addrs, updating]);\r\n\r\n  const handleUpdate = useCallback(\r\n    (updated: Addr) => {\r\n      const index = addrs.findIndex((addr) => addr.id === updated.id);\r\n      if (index > -1) {\r\n        addrs[index] = { ...updated, newAdding: false };\r\n      } else {\r\n        addrs.push({ ...updated, newAdding: false });\r\n      }\r\n      setAddrs([...addrs]);\r\n    },\r\n    [addrs]\r\n  );\r\n\r\n  const handleUpdates = useCallback(() => {\r\n    setMode(Mode.View);\r\n    if (changed.length) {\r\n      notification.open({\r\n        message: \"Updating messsage\",\r\n        description: `There are ${\r\n          changed.length\r\n        } address(es) will be updated\\nThe ID:[${changed\r\n          .map((c) => c.id)\r\n          .join(\",\")}]`,\r\n      });\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    changed.forEach((updated) => {\r\n      handleUpdate(updated);\r\n    });\r\n    setUpdating([]);\r\n  }, [changed, handleUpdate]);\r\n\r\n  // Each row sync the modified data to the list for later updating\r\n  const syncUpdate = useCallback(\r\n    (addr: Addr) => {\r\n      const index = updating.findIndex((a) => addr.id === a.id);\r\n      if (index > -1) {\r\n        updating[index] = { ...addr };\r\n      } else {\r\n        updating.push({ ...addr });\r\n      }\r\n      setUpdating([...updating]);\r\n    },\r\n    [updating]\r\n  );\r\n\r\n  const handleDelete = useCallback(() => {\r\n    if (selected.length < 1) {\r\n      return;\r\n    }\r\n    const next: Addrs = [];\r\n    addrs.forEach(addr => {\r\n      if (!selected.find((a) => a.id === addr.id)) {\r\n        next.push(addr)\r\n      }\r\n    });\r\n\r\n    setAddrs(next);\r\n\r\n    if (updating.length > 0) {\r\n      const nextUpdating: Addrs = []\r\n\r\n      updating.forEach(addr => {\r\n        if (!selected.find((a) => a.id === addr.id)) {\r\n          nextUpdating.push(addr)\r\n        }\r\n      })\r\n      if (updating.length > nextUpdating.length) {\r\n        setUpdating(nextUpdating)\r\n      }\r\n    }\r\n\r\n    setSelected([]);\r\n  }, [addrs, updating, selected]);\r\n\r\n  const handleAdd = useCallback(() => {\r\n    const addrNew = genAddr();\r\n\r\n    setUpdating([...updating, addrNew]);\r\n    setAddrs([...addrs, addrNew]);\r\n    setMode(Mode.Editing);\r\n  }, [updating, addrs]);\r\n\r\n  const handleSelect = useCallback((selecting: Addrs) => {\r\n    setSelected(selecting);\r\n  }, []);\r\n\r\n  const allAddr = useMemo(() => {\r\n    const list = [...addrs];\r\n    updating.forEach((a) => {\r\n      const index = list.findIndex((b) => a.id === b.id);\r\n      list[index] = { ...a };\r\n    });\r\n    return [...list];\r\n  }, [addrs, updating]);\r\n\r\n  return (\r\n    <MyContext.Provider\r\n      value={{\r\n        addrs,\r\n        all: allAddr,\r\n        selected,\r\n        handleAdd,\r\n        handleUpdate: () => handleUpdates(),\r\n        handleDelete,\r\n        handleSelect,\r\n        syncUpdate,\r\n        mode,\r\n        setMode,\r\n      }}\r\n    >\r\n      <div className=\"App\">\r\n        <main>\r\n          <AddrsTable />\r\n        </main>\r\n      </div>\r\n    </MyContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\n\r\ni18n\r\n  .use(initReactI18next) // passes i18n down to react-i18next\r\n  .init({\r\n    resources: {\r\n      en: {\r\n        translation: {\r\n          title: \"Address Book\",\r\n          id: \"ID\",\r\n          name: \"Name\",\r\n          location: \"Location\",\r\n          office: \"Office\",\r\n          phone: \"Phone\",\r\n          cell: \"Cell\",\r\n          delete: \"Delete\",\r\n          update: \"Update\",\r\n          add: \"Add\",\r\n        },\r\n      },\r\n      zh: {\r\n        translation: {\r\n          title: \"地址簿\",\r\n          id: \"ID\",\r\n          name: \"姓名\",\r\n          location: \"位置\",\r\n          office: \"办公室\",\r\n          phone: \"电话\",\r\n          cell: \"手机\",\r\n          delete: \"删除\",\r\n          update: \"更新\",\r\n          add: \"添加\",\r\n        },\r\n      },\r\n    },\r\n    lng: \"en\",\r\n    fallbackLng: \"en\",\r\n\r\n    interpolation: {\r\n      escapeValue: false,\r\n    },\r\n  });\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"./i18n\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}